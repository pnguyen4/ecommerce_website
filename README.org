#+TITLE: Beaconfire Project: E-Commerce Website
#+AUTHOR: Phillip Nguyen

[[https://github.com/pnguyen4/ecommerce_website/blob/main/schema.org][Click here to see schema]]

* Project Structure
** ~index.js~
Main entry point to the web application.
This just:
1. Imports ~index.js~  (our application)
2. Checks if database connection from ~config/db.js~ is open
3. Sets server to listen at our designated port

** ~server.js~
1. initializes our middleware
    - ~dotenv~ to get our database credentials and other secrets
    - ~express.json()~ to parse requests with JSON body
    - ~express.urlencoded()~: deals with requests with ~content-type: application/x-www-form-urlencoded~ header and form data in general
    - ~cookie-parser~: parse cookie header and populate req.cookies to easily work with json web tokens
    - ~ejs~ as our template engine
2. sets ~/public~ as publically available static files, some JS, SASS-generated CSS, and images for our products.
3. imports our individual routes exported by ~routes/index.js~
4. provides a catch-all route to display a "page not found" error that redirects back to home

** ~config/~
- ~db.js~: connects to the database, connection object exported to index.js
- ~seed.js~ wipes the database and initializes it with an admin, a standard user, and 30 products. Run with ~npm run seed~.

** ~routes/~
Uses Express Router to listen for all requests and delegates response generation to controller.
- ~index.js~: aggregates all our routes

** ~middleware/~
- ~auth.js~: just checks to see if user request has a jwt token (meaning they are signed in) for routes that require it.

** ~controllers/~
1. This contains the logic for generating responses to HTTP requests.
2. Will interact with the database following the outline set by our schemas from ~Models/~
3. After each successful operation the view will be re-rendered with SSR.

** ~models/~
- ~User.js~: user schema, also has Joi code for validating new/updated users
- ~Product.js~: product schema

** ~views/~
- ~main.ejs~: handles all the logic for conditional rendering
- ~home.ejs~: home page for regular users; main view for browsing products using pagination
- ~admin_page.ejs~: special page that allows admins to view all existing user accounts and their favorites list
- ~signup_page.ejs~
- ~login_page.ejs~
- ~partials/~:
  - ~nav.ejs~: Displays sign up and login buttons if user is not logged in, signout button when user is logged in. Always displays button to go to home page.
  - ~header.ejs~: boilerplate, also put everything in a flexbox
  - ~footer.ejs~: boilerplate

** ~public/~
- ~css/~: all the css generated by SASS from ~scss/~
- ~js/~: bits of javascript we might want the user to have (i.e. event listeners, etc)
- ~images/~: we will be serving product images locally for this project

** ~scss/~
All files here will be compiled to CSS and outputted to ~public/css/~.
~sass --watch server/scss:server/public/css~ command started by ~npm run dev~ (alongside nodemon) will automatically detect and recompile when changes are made.
